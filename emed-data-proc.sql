use emed;

-- UCS Events
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the PSUs using the command:  ? show environment power ? If the status of the PSU is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the PSU is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'D0DBD97B710A81434388031BF178E9F9','P3/P4');

insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the PSUs using the command:  ? show environment power ? If the status of the PSU is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the PSU is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'B8F3A9B7A520DD7090BB5AB25E87F926','P3/P4');
insert into `procText` (procText) VALUES ('Connect to UCS GUI. ? Check the status of the fabric interconnect memory ? If the status of the memory is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the Memory is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'323AA806419C1EA1817DED17FB86A1A3','P3/P4');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the PSUs using the command:  ? show environment power ? If the status of the PSU is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the PSU is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'360C961A7F2967BD9AC7A96A07E22011','P3/P4');
insert into `procText` (procText) VALUES ('Connect to UCS GUI. ? Check the status of the fabric interconnect mainBoardOutlet1 or Temperature alerts ? If the status of the mainBoardOutlet1 or Temperature alerts is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the mainBoardOutlet1 or Temperature alerts is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'9932CE7B39488D1043DFB6CE72B60EFF','P3/P4');
insert into `procText` (procText) VALUES ('Connect to UCS GUI. ? Check the status of the fabric interconnect Ethernet Resets for specific port idintified ? If the status of the Ethernet Resets is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the Ethernet Resets is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'92CEC5FF69FAFF51AE6B5C316B30E37B','P3/P4');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the fan using the command:  ? show environment fan ? If the status of the FAN module is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the fan is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'7DF1CDB35123B188E506F9D6026B47F9','P3/P4');
insert into `procText` (procText) VALUES ('Connect to UCS GUI. ? Check the status of theC series fan in console ? If the status of the FAN module is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the fan is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'5CA071386770A2A27EA469A9341445EF','P3/P4');
insert into `procText` (procText) VALUES ('Connect to UCS GUI. ? Check the status of the fabric interconnect mainBoardOutlet2 or Temperature alerts ? If the status of the mainBoardOutlet2 or Temperature alerts is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the mainBoardOutlet2 or Temperature alerts is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'5AE680DE1D3BC9B728DA26C3E0A3D40C','P3/P4');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the fan using the command:  ? show environment fan ? If the status of the FAN module is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the fan is not OK, raise a P3 to INFRA L3 and page on-call support to check if the fan needs to be replaced.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'6AE3AEFF23C07D1EA470856A96D701FE','P3/P4');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the fan using the command:  ? show environment fan ? If the status of the FAN module is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the fan is not OK, raise a P3 to INFRA L3 and page on-call support to check if the fan needs to be replaced.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2178341D754953C09EAFC442A3823E51','P3/P4');
insert into `procText` (procText) VALUES ('Connect to UCS GUI. ? Check the status of the chassis power ? If the status of the chassis power is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the chassis power is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'54EA544762D7A9730AC4275B01B9F2DD','P3/P4');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the fan using the command:  ? show environment fan ? If the status of the FAN module is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the fan is not OK, raise a P3 to INFRA L3 and page on-call support to check if the fan needs to be replaced.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'BBE95FC2F486D27D2ECF12AB587B58FF','P3/P4');
insert into `procText` (procText) VALUES ('Connect to UCS GUI. ? Check the status of the fabric interconnect Ethernet Discards for specific port idintified ? If the status of the Ethernet Discards is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the Ethernet Discards is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'C9E1182EDAD486B06920C8F830AB1D76','P3/P4');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the fan using the command:  ? show environment fan ? If the status of the FAN module is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the fan is not OK, raise a P3 to INFRA L3 and page on-call support to check if the fan needs to be replaced.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'C691A05796A4FDE5AFB4DD3743A8C7A3','P3/P4');
insert into `procText` (procText) VALUES ('Connect to UCS GUI. ? Check the status of the fabric interconnect Ethernet Collisions for specific port idintified ? If the status of the Ethernet Collisions is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the Ethernet Collisions is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'324EC7A3F68731D3BEDC950BD0D2E2C5','P3/P4');
insert into `procText` (procText) VALUES ('Connect to UCS GUI. ? Check the status of the fabric interconnect Load for specific Fabric Interconnect ? If the status of the abric interconnect Load is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the abric interconnect Load is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'DED8A1475BFF9428CDBF1713D93B423C','P3/P4');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the PSUs using the command:  ? show environment power ? If the status of the PSU is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the PSU is not OK, raise a P3 to INFRA L3 and page on-call support to check if it needs to be replaced.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'569E8FC031E5EF227091496D4E24C4AF','P3/P4');
insert into `procText` (procText) VALUES ('Connect to UCS GUI. ? Check the status of the fabric interconnect Ethernet Pauses for specific port idintified ? If the status of the Ethernet Pauses is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the Ethernet Pauses is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'DBF5525268BEA1918EAAF7008A98C572','P3/P4');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the fan using the command:  ? show environment fan ? If the status of the FAN module is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the fan is not OK, raise a P3 to INFRA L3 and page on-call support to check if the fan needs to be replaced.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'880C49BC5CBC675A10294207F7A52778','P3/P4');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the fan using the command:  ? show environment fan ? If the status of the FAN module is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the fan is not OK, raise a P3 to INFRA L3 and page on-call support to check if the fan needs to be replaced.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'DDFCABB292D1972D8AD3F4C328819395','P3/P4');
insert into `procText` (procText) VALUES ('Connect to UCS GUI. ? Check the status of the chassis power ? If the status of the chassis power is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the chassis power is not OK, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'60DA86BE64C293C137C86C96764E72F5','P3/P4');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the PSUs using the command:  ? show environment power ? If the status of the PSU is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the PSU is not OK, raise a P3 to INFRA L3 and page on-call support to check if it needs to be replaced.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'D292C9A205E94AD9ADC6A4F851803258','P3/P4');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check the status of the fan using the command:  ? show environment fan ? If the status of the FAN module is OK, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the status of the fan is not OK, raise a P3 to INFRA L3 and page on-call support to check if the fan needs to be replaced.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'722BF0426301EA61FF692AC4475B4735','P3/P4');

-- VMAX
insert into `procText` (procText) VALUES ('Connect to VMAX Unisphere. ? Check the status of the VMAX response time write is degraded in Alarm console  ? If the status of the VMAX response time write is degraded does not exist, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VMAX response time write is degraded exists, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'FB6AE79ADDB33C3FA2736CB50FF867C4','P3');
insert into `procText` (procText) VALUES ('Connect to VMAX Unisphere. ? Check the status of the VMAX storage pool utilization is 95% or higher in Alarm console  ? If the status of the VMAX storage pool utilization is below 80%, raise a P3 incident to the INFRA team to check for code bugs that may cause this. ? If the VMAX storage pool utilization is 95% or higher, raise a P2 to INFRA L2 and follow P2 situation management protocol and enage On-call if neccessary.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'56C48A6A29C3CE91752A5D23AEADA6B2','P2');
insert into `procText` (procText) VALUES ('Connect to VMAX Unisphere. ? Check the status of the VMAX storage pool utilization is 90% to 94% in Alarm console  ? If the status of the VMAX storage pool utilization is below 80%, raise a P3 incident to the INFRA team to check for code bugs that may cause this. ? If the VMAX storage pool utilization is 90% to 94% exists, raise a P2 to INFRA L2 and follow P2 situation management protocol and enage On-call if neccessary.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'ADAD0A218C7814ED39D7448CEB16B232','P2');
insert into `procText` (procText) VALUES ('Connect to VMAX Unisphere. ? Check the status of the VMAX storage pool utilization is 80% to 89% in Alarm console  ? If the status of the VMAX storage pool utilization is 80% to 89% does not exist, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VMAX storage pool utilization is 80% to 89% exists, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'E044B40E62B2121A307E474551E71430','P3');
insert into `procText` (procText) VALUES ('Connect to VMAX Unisphere. ? Check the status of the VMAX response time read is degraded in Alarm console  ? If the status of the VMAX response time read is degraded does not exist, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VMAX response time read is degraded exists, raise a P3 to INFRA L2.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'E626DA60FDC67466F87A0B7B7D2C69B7','P3');

-- VNX
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX Raid group utilization is 95% in Alarm console  ? If the status of the VNX Raid group utilization is below 80%, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX Raid group utilization is 95% exists, raise a P2 to INFRA L2 and follow P2 situation management protocol and enage On-call if neccessary');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'C1C64CC2F31298A963DB2168641B0C88','P2');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX Raid group utilization is 90% in Alarm console  ? If the status of the VNX Raid group utilization is below 80%, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX Raid group utilization is 90% exists, raise a P2 to INFRA L2 and follow P2 situation management protocol and enage On-call if neccessary');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'FA299F046EBC9F26EAE56BB95EE49897','P2');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX Raid group utilization is 80% in Alarm console  ? If the status of the VNX Raid group utilization is below 80%, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX Raid group utilization is 80% exists, raise a P3 to INFRA L2');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'08615D909E33669D1B04626CB66A609F','P3');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX power supply status is degraded in Alarm console  ? If the status of the VNX power supply status is degraded is not present, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX power supply status is degraded exists, raise a P3 to INFRA L2');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'63A89828836DC632CBBD74E409A226E0','P3');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX array status is critical in Alarm console  ? If the status of the VNX array status is critical is not present, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX array status is critical exists, raise a P2 to INFRA L2 and follow P2 situation management protocol and enage On-call if neccessary.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'AFE51D378541AD96947A40A654367A94','P2');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX Storage Pool utilization is 95% in Alarm console  ? If the status of the VNX Storage Pool utilization is below 80%, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX Storage Pool utilization is 95% exists, raise a P2 to INFRA L2 and follow P2 situation management protocol and enage On-call if neccessary');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'4EEC52DD65190D43C7CE45F8E6A43401','P2');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX Storage Pool utilization is 90% in Alarm console  ? If the status of the VNX Storage Pool utilization is below 80%, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX Storage Pool utilization is 90% exists, raise a P2 to INFRA L2 and follow P2 situation management protocol and enage On-call if neccessary');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'E8AB4920D8A3BD06042E507EAE3E0A58','P2');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX Storage Pool utilization is 80% in Alarm console  ? If the status of the VNX Storage Pool utilization is below 80%, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX Storage Pool utilization is 80% exists, raise a P3 to INFRA L2');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'FD64AD55AC38489686FEC04C0DD7CEBE','P3');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX power supply status is Unknown in Alarm console  ? If the status of the VNX power supply status is Unknown is not present, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX power supply status is Unknown exists, raise a P3 to INFRA L2');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2A318ADB5287FAA46EACD0E3BD8C83B5','P3');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX enclosure health status is degraded in Alarm console  ? If the status of the VNX enclosure health status is degraded is not present, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX enclosure health status is degraded exists, raise a P3 to INFRA L2');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'954BE7CDC6C328245ECB033003574039','P3');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX File System utilization is 95% in Alarm console  ? If the status of the VNX File System utilization is below 80%, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX File System utilization is 95% exists, raise a P2 to INFRA L2 and follow P2 situation management protocol and enage On-call if neccessary');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'686A2332382AFB1AF5CEB26CBB3B46D0','P2');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX File System utilization is 85% in Alarm console  ? If the status of the VNX File System utilization is below 80%, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX File System utilization is 85% exists, raise a P3 to INFRA L2');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'692F61D2C3E94FB0D0614704D72D46DD','P3');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX array status is degraded in Alarm console  ? If the status of the VNX array status is degraded is not present, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX array status is degraded exists, raise a P3 to INFRA L2');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'A06B36A67C690E7272ADA8BAA915FB4E','P3');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX enclosure health status is critical in Alarm console  ? If the status of the VNX enclosure health status is critical is not present, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX enclosure health status is critical exists, raise a P2 to INFRA L2 and follow P2 situation management protocol and enage On-call if neccessary');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'115B03DD71BE9576C216C6DD27741736','P2');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX power supply status is critical in Alarm console  ? If the status of the VNX power supply status is critical is not present, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX power supply status is critical exists, raise a P2 to INFRA L2 and follow P2 situation management protocol and enage On-call if neccessary');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'EBB3C708AF6C58565A39D62248D529F8','P3');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX snapview pool utilization has exceeded critical threshold is 80% in Alarm console  ? If the status of the VNX snapview pool utilization has exceeded critical threshold is below 80%, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX snapview pool utilization has exceeded critical threshold is 80% exists, raise a P3 to INFRA L2');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'16E3F690DBE2725D4174CDE17D211067','P3');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX enclosure inlet temperature exceeded threshold in Alarm console  ? If the status of the VNX enclosure inlet temperature exceeded threshold is not present, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX enclosure inlet temperature exceeded threshold exists, raise a P3 to INFRA L2');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'EC37134EBECDFB93DB670EAEDDC1EA08','P3');
insert into `procText` (procText) VALUES ('Connect to VNX Unisphere. ? Check the status of the VNX statistics logging Interval has exceeded threshold in Alarm console  ? If the status of the VNX statistics logging Interval has exceeded threshold is not present, raise a P4 incident to the INFRA team to check for code bugs that may cause this. ? If the VNX statistics logging Interval has exceeded threshold exists, raise a P3 to INFRA L2');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'957575423CF80596471E55AE516784D5','P3');

--VNXe
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Lun Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'F60DEBEB0BBFD406CA093C5559BD4F60','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify System Health Alert in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'EAFDF624E567293839A3BFB4F8AD9F44','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Disk Health Alert in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'C69A2E4DA33F2B343EABC1A98204B292','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Enclosure Health Threshold Alert in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'26993870D57A07F8488BD48FDCD61596','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Component Card Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'11C1DB64A91F47F03B898C8AE35D3004','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Aggregate Stroage Controller port Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'D450D7F8B1071CDD74E9F674093FE57A','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Storage Controller Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1C2BE18877547326C9CA4FD8321AA270','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Shred Folder Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'25693AA27126AB76EFCCBB7FC3F97BB4','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Compoenent Card Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'3B3B09773284DEF6B1F49870845F5DE6','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Storage Pool Health Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'4DA94E3DE240DA5BDC8E9A3CFB02F704','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Power supply health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'EC563209B9CADCB70F6A96C3186F916F','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Storage Controller Interface Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'7AD9ACEFE8DCC1E3773421643DD08CA5','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Storage Processor Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'F82895C044DF59E24775221B9BB39F11','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Storage System Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'861D3A57B9E60D6DB261A4B4A83A4B95','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify {Pool Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'B6779A29163FDA2E04E472D3289E96E9','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Storage Controller HW Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'207DBE9C925AF40BAEE4FBD06BE41BA1','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Shared Folder Server Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'8D0EDAFBDBC1DC9310AA7AB06237ADFA','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Aggregate Storage Controller Port Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1FEDBDF8CC8D00CEFFB176893C48F92D','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Storage Controller HW Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'514170855D0AC4DAEFBC089D533A0328','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Power Supply Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2D0FAB4B351F0690EEC304E5B28AB240','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Storage Processor Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'710B043861500D8BAC76AE93A661068E','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Lun Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'792D08F1B92CF25DDC7FAE376919A1E6','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Contract Expiration alert in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'CDB997D8F266A8C33F8746350934591F','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Storage Controller Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1D1DE2285CF9C8A26E25B09AFF0E0537','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Enclosure Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'326E92324F9FD5546CE26939CD2A9016','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Feature License alert in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'E2731D4E36DBEAEFBF4566AD568CF834','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Stroage Pool Subscription in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'8C238D20DA1C50E38F5D3B32364ABCB1','P3/P4');
insert into `procText` (procText) VALUES ('1. Log into VNXe to verify Disk Health in VNXe Console 2. If alert is not able to be verified open P4 incident to Infra to ideintify false positive alert  3. If Alert is verified open a P3 to Infra to work incident');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'6E56706295CDF32A6EB7306EA069D26A','P3/P4');

-- Isilon
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to IFS utilization. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'51CAF4F6924384E7482F07008816E98E','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'A5E0FBFF1919D6C5C1552E1F0E234115','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'590CC8356996BF0E30F9A4657BC43390','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'057F2796C135DFA879185083AE3CA502','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2ABB3F44DD9822D11437D902E0CBFDFC','P2/P3');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'99FF42CFECE381979EB49134738D1DCA','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'D68ECD301DFF239628C95F2E3ADA83FB','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'EDD2F4468B77345A158A6BC6764C6739','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'71A562E3175C16F0BA7143DE71A42646','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'DAF9E8FF92CB4CA6EEB1DDE86DAF4606','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1D26D6442426817C5E29A6700460440A','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'9F3D0F1F983FBBCFF9884D6E1F60B34E','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'36DD68C7802C506957DAB1747F331891','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'C8FD716B642A25FD83E1A701CF6B3E17','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2710159395065AC728200A3CEBB8581F','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'B357EA7542F80E907F73A0F4E04AB29C','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'D3C8FFEB0B6EB6CFE93DCB90D5B053BC','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'D4E42ACA6894359CE89C41E79211087D','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'71F51AC4895C022875FC14EB95A5DF79','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'03D855A1DF5BDA6AB763A94B21ED15C6','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'830CD745AD5CA51CF792B277209C737C','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'CD7DFCE44ABC59AE56AA8B4552F7A722','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'AF705CF817C1B9940AB755CE33C9432D','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'4560BA6E3319280566AE7552D4D80612','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'9ABB6C7A25D416229074B76409B2E112','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'C1B07A71D32E192B38D304490EC2FA0F','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to AVSCAN. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'C4B5CD388594BF4FE33E63CAFA620E1D','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to Filesystem. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'49BBC33C8E36DA9C12B1677BDAB5C93F','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'31ECF3F570F752F2FE68F20B331A983F','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'E57CE24432EB403DC7FC916927467ABB','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'4F765DC9314410CA12D3522A8FD0DBFF','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'732D05672A99334F8900A464A16F279F','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'E31D54463EE67AB0D620930055564F9B','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1BBB98C26CECB779A90B3E76D2BBB7E0','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to Nade Status. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'961F7E182B9FA609B213046B5D41A127','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'CD6B928B8D975F8736B4EB22BB6ED001','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'D3534130AB08F7D9D96F969A2CE026EE','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to DiskPool. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'AF95CC46845BFD0F97BC9C928E88CB18','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'DE5626514D4BA1FDE7C0F20D6ADBD62C','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'5EDCC3907B28F3DF26200C8DE7272B3A','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'CD7B5045DABFB7B816417FF21C4769F4','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'344CF7A4E930701B65522AAC4672921A','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'868D78F996F633EFFC3789B0D8251370','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'6FFEF867C5B7F3BB31118C749C8EC8F4','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'57FFEA95EB8A5F63B741D2A893D6E1E8','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1AC5F44D2E1A71F8C2051131196026FE','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'95DE7696DA814BA993D65DEFBB2A8A25','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1E1D5C9867C98E6E6E08944CD7314E31','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'72225EC1216E135A770DFB54E346BB09','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'7C185951F8B9C931F977FFEE1CC76072','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'7A4F5F02B4BE362C00B7970CAA0D79CF','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'74A8AA45176A3A5F25EB24D979F8B515','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'49727ED9D0AE64480CD29A9F43D003A4','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'7F0226E1D6E1EE8AB15D6159FADFD821','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'B21A5621EC1EFEED82AF50398D68D24C','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0FEAC19D278DDA0DF8B7026AA93B757B','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'B054A3821458B18EB3D2948E34CAD0D4','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'F220A29DD0BE8721EBF9718E002C6BDC','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'39B94C75BD927990FDE4C82B4C54150B','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to Hardware Error. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'77EBB583ADB9264804FEB9DEE7DD02FC','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'3EBE6A585FDFB1A4D0D3F1B89AE101E9','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0FCDC41293D858F8527D4C83CCA456EC','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'7D5651C202F3D370D79394F8AD2F0BCE','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to Filesystem. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'8F12F41483AC800051351468D9E4C767','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'77978D6CAB795B3BC1F0DF38FBD6E57A','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'F7BCEAC60FE2021B424B52184D92286D','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'9C1F94BA2720DABDAE67CEBB660D0980','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'60379C61A117D6B79F7A2CEEF9C3E67D','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to network. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'BA19276ECF9FD9E8BE7D392CCA0B19FA','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'FC5FAF0A6004655F3A90C938143DFE8B','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'122FFA5F0DE9949A39FAE04382364071','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'22DB22555CA74C5021163C42EE60325A','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'ED23D7FB7AF7C2A01845BCF775A1B3AC','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'B237FFDBF50C764E3A5A77A1EB5AFE44','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'056F1723ACCEAAACC5CBC9D3A88CCB54','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'4764BCA868E1F7C309095A2963475189','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'98FBE689A769C5FB5019F99D6C432EAF','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'F7EB9A143720433B76DB54D09FB16320','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'C6BE4690BF9B56BD810CBBDCB474D13B','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to Filesystem. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'A54809746C3A9A3BB25B28BDA6B9FC52','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'69464DE1B47A6576693F2E4015470C32','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'A0BEC0428FF5E512CEBEADF0B2C90564','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'5C3688170E76AD609B115043AAFFDEB7','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'AB31EB29D0F692E407C2614F733D0EEC','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1E97EEF2704BFCE6A3008CCB7ACEB713','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'8DF067B6A3DF16ED69DA1DA881E9279E','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to Fan Hardware and Temperature. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'EA00B8BB3DCF5B561549B4F7E9BCFD56','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'5305DA5564B49F72AD1BFFD75CD5733C','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'81EDB93C3736867316D8F2BC9212F2BF','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'813C350F959FBA816900A722EE9FD8C9','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'130BF3EA8BBBE23450170226A3EE5D39','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'4C37617F97A271A72BCB21527EE72A5E','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'8190F92C10A897EDBA22C1275528E5F8','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to Network. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'271F6DEF88B4F80656AA04963247011E','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'7615677102729F189471B9E90B90B45A','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'EF0C72D4EC3CAADA8584E7DAA783E91F','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'69F6AC84C2138BF7BA768BC8F13B72C9','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'B6413C0B9E2331A096B7F88A916BFC9A','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'D0AB95A0563C3531D998E8C3F7F5A200','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'E3EB296188305CEDC9B531217F49877E','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'26059BEFC4D104E4D637F157A0004FAA','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'008D4DFC3BCF7712A6C3C9F381F7804A','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'8600323257502DB20A92E921FE1D7F1B','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'91D4268C01305D9E32C783839A76FC80','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'67299E7D39890CAEC50E5A116C1C8BF1','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to Temperature. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'82BE3F70C0A16E057E425C7D987630AE','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'FBBFADA7866C0F7A0B69C06BECDDB9D6','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'97B75F7149B7DA918ADA1AACC5C3C79B','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to CPU. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'497DBEA576D9734D5A8143BEF9E6724B','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'962AB08388798B0B70C7B65455C0CE42','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'130D48C079516805D23B897DC5A778D7','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'40208C93D4CF2EAFD1A34E8951C9B951','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1F9A9F4A1B64832F0DB3219C1BC365AD','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. verify alert in console related to Network Authenication. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'CD23CB08E609FCECC15033EC2F2C0EDA','P2');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'DF6EFA4FF46ED4746C1D954325BB200B','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into Isilon Console. 2. Verify alert in console related to trap recevied. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'7B28626CDB7C90D53E8DFA08901C26A7','P3/P4');

-- XMS, Xtreme IO, XIOS
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1901102','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900205','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0800402','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1400505','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700202','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401105','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401106','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700803','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1300106','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0403703','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401706','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401705','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900803','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0800106','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0800104','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200508','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200509','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200505','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200506','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700203','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0407002','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1400602','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402703','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900103','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402704','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1500402','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404502','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404503','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0300206','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0600701','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1600603','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2000004','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401903','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401902','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2000003','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700802','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2000002','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402302','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402303','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0403801','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0203101','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404106','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0500203','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0600304','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404105','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0600303','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401206','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0400503','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401205','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900602','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900603','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0403906','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0403905','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1701502','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1500702','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0202003','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1200107','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1400503','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0202002','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2000012','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2000013','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0800704','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900206','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404702','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404703','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402505','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2000204','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402506','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1600202','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2000203','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402603','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402602','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401602','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401603','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402902','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0500202','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2500204','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2500205','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2500206','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1400403','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2500203','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402203','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402202','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0901204','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1500502','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0500303','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404004','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404003','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404002','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0600201','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0500304','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1501403','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1501401','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900703','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0403102','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900704','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0500403','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1500602','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0201004','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0201003','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402502','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402503','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402504','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401306','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401305','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402912','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900306','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900305','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404602','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200303','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0406103','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200304','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1600302','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1500204','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1500203','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1800304','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0800102','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1400303','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1400302','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0800103','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200607','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200606','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0500103','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200604','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0500104','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0500106','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1600402','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1500802','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0400704','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1501102','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1800303','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0400703','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0400902','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402105','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402106','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700403','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900405','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0900406','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700704','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0405503','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0405502','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0405504','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401406','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1501504','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1501503','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2000202','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0800604','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404902','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200809','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401405','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402403','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0500102','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700702','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700703','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700903','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700904','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1100405','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1501302','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1500104','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1500105','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0201102','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1500102','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0400302','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1100406','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0600203','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0202303','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1600504','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1600503','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200811','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0400202','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1400106','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1400105','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1400104','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1600916','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0400802','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1600915','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0403305','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0901203','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0403306','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1600403','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404205','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1100202','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0404206','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0300102','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401802','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0401803','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'2000102','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1501603','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1400404','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700303','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1700304','P3/P4');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200511','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P2 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0200512','P2');
insert into `procText` (procText) VALUES ('1 - Log into XMS Console. 2. verify alert in console related to SNMP Trap. 3. If False alarm open P4 to Infra to identify potential bugs in code. 4. If Alert is verified Open P3 to Infra to correct issue.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0402803','P3/P4');

--  Cisco Switch
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check memory usage using the command:  ? show system resources ? Raise a P3 to INFRA L3 with a screenshot of the result of the above command.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'85ABF1239B370F7DBC039886D35E27D1','P3');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check memory usage using the command:  ? show system resources ? Raise a P3 to INFRA L3 with a screenshot of the result of the above command.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0604C69E9B7197C31E6AFB2B239C7990','P3');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check memory usage using the command:  ? show system resources ? Raise a P3 to INFRA L3 with a screenshot of the result of the above command.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'EA79F1B2B7ACA4BC20AF69676942EAAC','P3');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check memory usage using the command:  ? show system resources ? Raise a P3 to INFRA L3 with a screenshot of the result of the above command.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'9FAFAEE7937740C3D573DA80F6355FD7','P3');
insert into `procText` (procText) VALUES ('Connect to the switch using SSH. ? Check memory usage using the command:  ? show system resources ? Raise a P3 to INFRA L3 with a screenshot of the result of the above command.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'C0D9C240A1C072220DF6FABD393B80DF','P3');

-- vSphere Hosts
insert into `procText` (procText) VALUES ('Check CPU usage history for the host on vCenter. ? Document your findings and raise a P3 to INFRA L3 with this information.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'C8C344738D2E17B18B0BFBE64FFECF54','P3');
insert into `procText` (procText) VALUES ('Check Host Free Memory Has Dropped Below High Threshold for the host on vCenter. ? Document your findings and raise a P3 to INFRA L3 with this information.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'5A18283E1ECFBDC6A793A3EC331681FA','P3');
insert into `procText` (procText) VALUES ('Check Memory usage history for the host on vCenter. ? Document your findings and raise a P3 to INFRA L3 with this information.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1BB1E3BCC297796F60CAD9A056A9C923','P3');
insert into `procText` (procText) VALUES ('Check CPU usage history for the host on vCenter. ? Document your findings and raise a P3 to INFRA L3 with this information.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'1BDBC1139763B129EBC0A52C5C000A47','P3');

-- vSphere Datastores
insert into `procText` (procText) VALUES ('Check the status of the datastor on vCenter and Unisphere. ? Document your findings and raise a P3 to INFRA L3 with this information.');
--insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'A29279EE1201EBC8C437DB700D1CC78F','P1');
-- Temporary by KCC to fix CHI priority issue  2017-May-16
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'A29279EE1201EBC8C437DB700D1CC78F','P3');

--insert into `procText` (procText) VALUES ('Check the status of the datastor on vCenter and Unisphere. ? Document your findings and raise a P3 to INFRA L3 with this information.');
--insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'C6030E3D4DEEE0C0329C74DA7B78A88E','P3');
--insert into `procText` (procText) VALUES ('Check the status of the datastor on vCenter and Unisphere. ? Document your findings and raise a P2 to INFRA L3 with this information.');
--insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'D9649FB7DE26CE88EA1B5C7F0A80D77D','P2');
--insert into `procText` (procText) VALUES ('Check the status of the datastor on vCenter and Unisphere. ? Document your findings and raise a P3 to INFRA L3 with this information.');
--insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'A29279EE1201EBC8C437DB700D1CC78F','P3');
--insert into `procText` (procText) VALUES ('Check the status of the datastor on vCenter and Unisphere. ? Document your findings and raise a P3 to INFRA L3 with this information.');
--insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'4DBFB313AFBF63401C4C8ED24DAC2787','P3');

-- CMOS (Tenant)
insert into `procText` (procText) VALUES ('Check memory usage history for the host on vCenter. ? Document your findings and raise a P3 to INFRA L3 with this information.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'6BF39222E07185017927EA670CF83378','P3');
insert into `procText` (procText) VALUES ('Check CPU usage history for the host on vCenter. ? Document your findings and raise a P2 to INFRA L3 with this information.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'8B7B1BAC5C2BB0BF3CF154BB665D2712','P2');
insert into `procText` (procText) VALUES ('Check Process usage history for the host on vCenter. ? Document your findings and raise a P2 to INFRA L3 with this information.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'97457C9E1F074FBB036C9ACA5285CDD7','P2');
insert into `procText` (procText) VALUES ('Check Storage usage history for the host on vCenter. ? Document your findings and raise a P2 to INFRA L3 with this information.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'25993221FC266BA8FFF4713B1B0AE4CB','P2');
insert into `procText` (procText) VALUES ('Check memory usage history for the host on vCenter. ? Document your findings and raise a P2 to INFRA L3 with this information.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'99489DDFD46E5617CFC3BEA5971A0813','P3');
insert into `procText` (procText) VALUES ('Check memory usage history for the VM on vCenter. ? Document your findings and raise a P3 to INFRA L3 with this information.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'15CC898BC33BCECA83F1E1AB2CFF9909','P3');
insert into `procText` (procText) VALUES ('Check CPU usage history for the VM on vCenter. ? Document your findings and raise a P3 to INFRA L3 with this information.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'B3E8274E12C9E13A4D893A28EA82B5CC','P3');

-- Unity
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'DC9129D5CC4698370BA63B77708055F9', 'P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'D5BE87C5EB7910BE7E6674407829BE89', 'P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'DC71D80EA4941DD87750309EC784AF6A', 'P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'664DFE99B64390BCB47B9416EC61AE6F', 'P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'0BE6B866C8C3AEAB982276AA6ED5BC0B', 'P2');

-- NSX
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F880E1AF12C73603AEF2BEA2B0268CCF','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BF206A63C548C03B7277952309BB37B3','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4500BB6208840D6B85CDEE109194FBE1','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6764F04E14077897F91429D6868FDB5A','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FD0F04D005E40C99B590AD02D33EE577','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8CF4CA0947A23C2866737BAE76A79EDF','p2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '639472CF125995B77B4D711821DC1F90','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9CB065D4BCEF7D44B485E94F4D3EC2B1','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8F4668C298EE1CE3E268030AF9286BA8','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0F050CFF28247AC21D3DFC1A719FD98A','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1C0EAD6DADCDB7586F4E64F6F4E68B9E','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B70C352EE462B585939FFDAEAD2274EE','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5E3424EED559D717AB73AAA58FA41690','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E51453EEED7320AE0CD024D346E23FF1','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1D60ACDC1215262D17A4DB5D27FE95E4','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D12A653FE3529D6BA3EFF28AC5F7F163','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EE2CC0C2DAD8FA50E1382EEADF211BC3','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3590535A410F658F91D18B02B025EBF7','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'90687E73F3A4A99227EDB809EA13FC19','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E140B59D237C403ED0D88CFF39C01ED1','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7783964D2012050B2EFF3949BACB3CD1','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A1A316E4A5CD6C10EB88C2511FF2037E','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6CBCECE2DD64A6631E531EEBB80AE389','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '19B7F0E462722EED45B553E265A56A80','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AE55A5162F5721602E4702CAF8678B3F','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4350F7C5A612FEAF333307196C50882A','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3E093CFDC53FE2EC59E7580A810CD7C9','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8FFBFC8F174901517F308DCA828A163C','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,'AF8D9F1E153CA0A085324F1F851A77AE','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D4342A4C08E5EABEDFEEAE1BD94B28BC','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '28CD7F15D911F46751396DE02CFAB5B1','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A31BD6A9D59AC662CCEBC235E3C616A5','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5C4F5D79C4C9EC576CC153D9E486FAC4','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6DC20A8C855B2710F91144DF440799C6','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '65E4BF132EAEE0C7AF2229DD631A6D5F','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BA24A67CCC1E65E773D7F97785E67719','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1D200D6D9E67C54EB053C042F9FC3F82','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BEDF6CAC889FFE2813F092FFC95241EE','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'ADFA98AF3C3C22395202BB32669EE968','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6C7AE2CD406BC58CA7B3E5FEDAE38CB7','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID,  '753666949F055A297887CF56B3A023B1','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BAA818A923D1861D7D7211804817332B','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E2CF3E2B49BC28660E7A66DE42FE73E0','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EEBA9C8204835376B6E48118A5C77491','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '716A82F980F3FCD73BC728BAA0B802D0','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '42F9D71D9059F14789DD697B92C2E623','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C80C97E90489C9491CFF66713F2CE615','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BEE73730C6C699B3FE6ED8223928A0A7','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '36488A58AFFBD639F1551A3ABC50F4DE','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FC657E79B306CD9836DF9C4F37367C7C','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '013C361EF1500F8486E69FFDB0FA3042','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EF58321071B3CE2647B4B1D7DEEE69D1','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A07E6DDD5557F126A0D839ECE8ADE222','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '82067D5116A20F10E438AC8560C50EE6','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A7D8E53C9D2B9EB513350676EB4762F3','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AD2C7BFDB38084D6F462A0994C2E7249','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2A2B3684A469E59E96C5BD97DE26A4AC','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C13C582B938D67E4E1773E252B404A91','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7B67F0D7B29995E7CD0AA4B72EEEEF36','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P2 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2FD70176A407937E9C157B06C367ACD7','P2');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C56047523AD5E36DBE6297D9DD26E5B5','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C4156B93162B3836523CC8FAEFFD03C6','P3');
insert into `procText` (procText) VALUES ('1. Accept alert, 2. copy alert message into incident ticket as a P3 and assign to Infra group for additional troubleshooting.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2124A01BD1FF9FCCC44A17C31090FC1B','P3');


-- GRM
insert into `procText` (procText) VALUES ('Log onto the VM via RDP or the console and check the usage of the drive.  Document your findings and raise a P3 incident to INFRA L3.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '75F923A45ABF37709F8DF269D98C117A','P3');
insert into `procText` (procText) VALUES ('Log onto the VM via RDP or the console and check the usage of the drive.  Document your findings and raise a P3 incident to INFRA L3.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3411BE932A0A0998EE5A0FA7073CBDA5','P3');

-- Switch iFace
insert into `procText` (procText) VALUES ('Validate if any Change records are opened for device in being alerted on.  If there is a Change to add more infrastructure accept the alert and update monitoring to reflect the new state for the ports.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E42F4DD36B4E262C71F43D3184A1712F','P4');
insert into `procText` (procText) VALUES ('Validate if any Change records are opened for device in being alerted on.  If there is a Change reach out to engineer executing the change to determine if this is known process for the change, accept the alert and document it as part of a change.  If there is no change for the device open P3 with Infra or Pool team.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '621866FB006A52B5C64B118A70B08C73','P3/P4');
insert into `procText` (procText) VALUES ('Validate if any Change records are opened for device in being alerted on.  If there is a Change reach out to engineer executing the change to determine if this is known process for the change, accept the alert and document it as part of a change.  If there is no change for the device open P3 with Infra or Pool team.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '884F05B7B9D85C6A692AE2D7D6A480D1','P4');
insert into `procText` (procText) VALUES ('Validate if any Change records are opened for device in being alerted on.  If there is a Change to add more infrastructure accept the alert and update monitoring to reflect the new state for the ports.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7A0091464FB1DFBDEF76B6472A99E18B','P4');
insert into `procText` (procText) VALUES ('Validate if any Change records are opened for device in being alerted on.  If there is a Change reach out to engineer executing the change to determine if this is known process for the change, accept the alert and document it as part of a change.  If there is no change for the device open P3 with Infra or Pool team.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '31941A48398DE7245BAACD21A5B70716','P4');
insert into `procText` (procText) VALUES ('Validate if any Change records are opened for device in being alerted on.  If there is a Change reach out to engineer executing the change to determine if this is known process for the change, accept the alert and document it as part of a change.  If there is no change for the device open P3 with Infra or Pool team.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4E0E8861F8E43207FC0C744D30A482E5','P4');
insert into `procText` (procText) VALUES ('Validate if any Change records are opened for device in being alerted on.  If there is a Change to add more infrastructure accept the alert and update monitoring to reflect the new state for the ports.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E0495B7C3267D5FCE354C5D8100F3A3C','P4');
insert into `procText` (procText) VALUES ('Validate if any Change records are opened for device in being alerted on.  If there is a Change to add more infrastructure accept the alert and update monitoring to reflect the new state for the ports.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '74D46E7D94ED435B6E612993D9FC6AB3','P4');
insert into `procText` (procText) VALUES ('Validate if any Change records are opened for device in being alerted on.  If there is a Change reach out to engineer executing the change to determine if this is known process for the change, accept the alert and document it as part of a change.  If there is no change for the device open P3 with Infra or Pool team.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E4BD027863036C0A85FC962E1967F320','P4');
insert into `procText` (procText) VALUES ('Validate if any Change records are opened for device in being alerted on.  If there is a Change reach out to engineer executing the change to determine if this is known process for the change, accept the alert and document it as part of a change.  If there is no change for the device open P3 with Infra or Pool team.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '466DC0BB1E7CC9888856D0E8DEBF3000','P4');


--  VM SRM Traps Events 20170621
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '24E4BF9CC73B69DCADB7DC845D17C5DB','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FFD44136613A433831F9FD3EB5F45839','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1909CDC082CDB445D53F434E2B6B05F1','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7C441F9ED91260E9EA616115B6044AA5','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'CBBEC026B8F3AC473CE6B6BC70549024','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0F9EDCBD0B96EA02D9E1322C6C806E2D','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '505C183C3DE854B1D7D98090EEEB677F','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C249F398EFFE620BDC61E21DF7E0A637','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2AD609F6E8CE2440DB9E2F9E4946EA42','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BAC05B02D019B62AE4B26724D90B7582','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8195583D50EECE7D29BC09C4E6DF2F91','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7132A0A40AD5726C5D47213ED440E04D','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A2EEB6163E322CAF065DA29C4CAF786A','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A7F096BFF99EC1A09ECD66452E7FBD5D','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '253C20351945A2665DC47BBBA77C5346','NA');
insert into `procText` (procText) VALUES ('All these events are during interaction with SRM so No tickets required we need events where SRM is having issues not when known events are occuring');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '31C0282253D8E8E293CD70085EE9143F','NA');

--  Recoverpoint Traps Events 20170621
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E5491F1A3C7C445FBBFC7892111D0450','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '388BB2A6F51646A38260CCF94A388876','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8DD0AFBEDC6843ECA620245B9B2B73F6','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device  if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DB935685453D4352B0B12063777834DF','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8CCFF90EDA704C4BAF60067730BA74F6','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '50F849F16030429480274C9DBD22E996','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A486401C533B48F19F2B0AC501D58EA6','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FF1F70AB9C7D432795CEC0853DA37B19','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '99ABE8B2E35E490394331CF9580CD05E','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9EBBEFD3693A473F9F541C0AC2C0C11B','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '77312B0109834A60B1BB0E55787FA582','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8D88E841A3754A0E911C4FFDEA92B542','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FA79401A4CC943ABA37F6BCBCFACA323','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C76B7A51874843989821147F4A92A9CC','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '94C99A1299794F8CBD2D40BDE92F0DE2','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E68C45D483C14BC8B507D7ABBEF46970','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BBB757DE5B8040C4BAFE15BA07B2825F','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '01205CE329C1433F8D04C3A2B48C4994','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E2B89994191B4134BB097A17D05E342B','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B6EBA1F0668E43449AF8D6366C810226','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '936AC99A805B4D8794C8EFA800FC8B45','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C705EC2561C6441DBC4BE7C6148C2512','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '85477860526E4F6085134C23350B79F5','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5FA1C1C4F41A473DB611B52A6483C445','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4E47B6A7A9874BFE8ADC3624363C11CE','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '256FE1897C1040908AF13094BBBEAD07','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E8D9F621E112473582C8B33CA14A267F','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D803A0CAB0774F7EB9A48E228A997AC2','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FCBCCC00188E436FAA8CF8DE22826E41','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9BF1EDB83CA04930B6408CCCBF236104','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '03A62F3B34FF421583334CC10ADB4B85','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A49F84A8492E4F42BAA9E7ED863D685D','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '17EBDCD7E1004D9BA6E370782F1EBB61','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5E06EF60524249E39522DCCC48FB2C1F','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '50F0E29C3BDE4754B9C2BA0DDC72AE3D','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D0437A24BBA44D4FB9B9DB766D71FCDE','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9FB6F76506404680BD79AC374AF7BCF2','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0E5C0668390D4891B63FA1FEBD8EB6C9','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AAE50EE5261E4E679C8EAB84874086B9','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D241EC4E5A9145AE855E822532A8A112','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '44E5F08C8D5B4F3BB744219E43C2F0F0','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1BD48964866945C1A58C62E4CA0444F2','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2B0AA43D0E36411C81E28CB54D2656E4','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2965578EA82A4C2AB7577B4C01B896C8','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9C8A780692AB44839C3823D8F9037895','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '97A7F524551547A3AC6F5F8C0DCE24FA','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '08AAE6992B054F4D96FBC4AE9B6C8924','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9EBC2FDCD3654907B4E14E475244B798','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D00199DE7B4C473A8FBE6666FB4DA26E','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F0F4978ABFBD46E48B9206B8185AFFB5','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '59BE6A5744C14847837073E580428D3A','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'ADFED31C06A94D24B7AAA37C1283E138','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E34AC86D8F06433C8A1749AFD16517D4','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DEFBF346C8734621B894F8D8AC8BB2B0','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5828B6C945744E00B6D20B369F58BA8F','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '68AAB7B978DF4492BFA57CA482C44E70','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7577F938C56243BAB41388B318F0A47D','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7D2F6BF26A8743328E504F45B8A1DAC1','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EBDE695131D04468B7F5DFA0F7FBFD78','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3605EAFE6A5C4D4398890EF5FE3828DE','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '06029954FB5D41819824186AFB4D5999','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E93E8C5886AA40BD9F81802D8CF606A8','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9F419D6D496F4AA0AB1297EB7BC2C23B','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '106CC4DFB9F148AC8DD3564013E60E16','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D788A3922614490982904331E4FF0AD6','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '739F8DDB936946EDBB944892533A78B0','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8C99B417D30046C5AC071A35A73D0E16','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A7C4F08BE8CE4422A1CA922D5695D3A7','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '548AE71F2609408C95B520E5A8293DFB','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '42A2D39FFA3F44C5901313D207D1DF64','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P2 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7B70DFBCB4164B3AB690D88D72878082','P2');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P2 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '919E8D9563404387BAD42EB6F119E833','P2');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A1EE82014AAE444FB41BD9D9AE6396CE','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A6FA96DDDA084A8187592CF97CF74C7F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FC411D19DC0F41B0A6B115841DC2AB50','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6E4F404CB7894E3E9DC26A1F89595846','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0C2EE835399F42C3B603C659D8FB5931','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '97D22476993F4EA9B40071896B6D424D','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E980F53DB6E84FBD8398DD245E8D64E3','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E7A353FC1FF44344942FF7F2648A60D2','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0A0509D217DA4580938E3ADC189D02CC','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '70F331D429D74B5B870CC35DA786D01F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D5A20262305C44F49066818F9EAEC5E0','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D8D695D32DF64D35BAD0A983A77DEC07','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '095CFF42AB33402283BF816FBBE8B5EF','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9FCC398663ED49A4AAA4D5B4D47DC105','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7C5E48B6E82741BC83B9DF580CC80FC8','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BCF2357561B4417795D2C3281632D7A2','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6B99086F74F24EB8AF6BD7179586A739','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '46062CEFF3654A77BDC04A561C8BEE75','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FBB92755807342A591161FCB269F1853','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DCD833D6E72C4D98BF42F652279BCD56','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3764744CF29F4260A0D851E0D754400C','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0EA6CBCB6E53444F95CCD96BD2567FD5','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4A51446172D04A8385CE9D20A1B8F568','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8D50755160EC41DEBEF7F0952EDA845F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1DFCD0B3EAA3495F8D9FDE3A8D469590','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '40BE1D9695E942B3B9439CB2FD4D8FA2','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FBE0299FDD4643CB8474BF0EDAA98460','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F03AC25AF4EF4ABBB28F4A97D6A0996F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '538B1B6F0AE34A8FA048399AEB12D470','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1FF00285591440EEAAAEAADAB37DB982','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8D9E251F0F3745D6B3C19FAB358280A3','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F231319DEB624EB1891E5EA39C5A2D32','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '049A8221A2624B728EB380C16AC17485','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '65885446D0784F07A40BA1B6AD4DD9BC','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AD1F232950F3464E9F46C0129A9CC212','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6CCCF8DF36F947E3AC538BE0FB608C02','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1FA65544423043BCA9B79CDF0D7191C1','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FE2B389BFB5D4866A48FCA15ED909628','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'ED9E9F4A00BA4F20B9CAA5F17047AE15','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F43038CBE6514F55AC7EF22EDCE6AA3B','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9B8E136D5A7D49869322DAB0D51EAC18','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '61FC6AA385D845B98885CA67D1F2BE33','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '211D77CBD9394610AED473B1AD38CA71','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5C7345FB9EB245A5A6747A83A61A59B0','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '51B747F2668645E99AEE04910C3C1A8D','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3A9D08C64DBE480380D377A5DCE20A89','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4F1C91A7C17649EE9CCA2A31900A33EE','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0656F36937584135B2A69D4F2911B769','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1C19E38FB5A74826A8062501C08EE678','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2B8A9D7E87A0480CA4E47D50F0A162A8','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F6328FF796394830AB081249FA95085B','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0AD090C1863C4856877146DE9269FA97','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C6F6724813E3497B8C27684BA80E0C98','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '73D8622974FE461CAE3A4CB6146FA772','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '89E4B24EF2124E05A596DC331C29C78B','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3013CF0374EC41679F60A66145567B2F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9F869509FD96450AB0BC4FB626DFB1C3','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '172987B1E2184C4BA1AF798E0ABE6D08','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '468878EE65DD46E78F4EF1DE8616F47A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3ABC890AA54F4AF7B578EC96D2B68F13','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '581449E1406D416DA8C292A8393C996F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5F09B47DF6F84BEF860CDCDBAF86D132','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '619E1638A4F84BFDB320AB5560FE890F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B10F40EB9BEB44F4BFF44E387EFDCADA','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EBC426550744433C9C8F232A157DDBC2','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1741FB08C513431B9A1491CAC3BA129E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F5042567DC0B450C96DECC3B5C437908','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '601AFBFC941A4D91A176E305B8ED1CC0','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2BA48613D79E4CD482DB5CF25F1BD17E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FD0AF112E62F46FFB7307E1E3AE46844','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '79EFFA7056DA4015ADECCF5787D224A4','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '39FFF667F00D43B6B3ADE21F4B9BBBDC','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3AC52A376B3D4F15B16152E4101C2630','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A607CF71874B439993F6BD4A469EDE77','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '50FAC46C4BB547B189581BDF8439B013','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C307D1692C6047A295380CDE5182E43E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1202F5FB2B094459942E93DBB48C1388','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '384CFB64F7C5424094C602AC4314D1A4','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DB8FAEF4A7D042418CBBE5668E17B85D','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3C6F925A623B4055B68E2ABAA6674989','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8A1A7146D1344FDB87375E262AD7AF6C','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DA711BD164394360A64DD5E58F02AAB2','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D11F1E2FCF534E788C5571A1BA238836','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '611AC103E300448C80CAB088AFC403C8','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7C287E6FE8094CA9A696DA7A91D512A5','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0DC122B7FAB446F59BCB8820AD50D327','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0B89FD7CF5BE4FE28CBC4DF81D3B59B1','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '70E0E8F5D0684252B234F005B271FB0E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '75371ED1B5D44773ACD500BEF00ACDDF','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '45DD98008E884559BBC421F717B718EC','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FC68586BE2464CAFAB55DEAB877F1DAA','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4545FF5A15CE4EC28656B31D675F0AB6','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '488EDCF036D34D9FA15715ACAD247DC4','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6CDC06C7714C477997F0CE5F81CE42C2','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F8EC4AD773294280B00ADE14BC1E7608','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '37D1A8095119483588D22013A7F7D94F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B8457DF649A7411A8367785A29AF3796','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '037967746E384CF08820B48C15D6BD15','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '177C2C0B938548D28C6CDE00A9677CB5','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D21C2AEB2544422C9E75D6856092E253','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1391482450B5431CACD9489EB5E2230F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A1A07DF580904139A7619E7BE802B441','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0455F397708A43D0ADA7971A4C519C7D','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8184E2CC004D478DABBF2AA652857B65','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0DB2A5D7A7AC472B81A02683000D82EF','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D274E9D83D0E48D2826BE4AF502356FF','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0FF67D3901234A50B1C13B05639777E2','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '25996FA55629466CABD76F458A586BEC','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FFCBC05F311F4CAA8E848C33EFE08A11','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '911ECD950C7649D388F972C550CA50B3','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D3712CCF1E0249349A745A609530B95A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'ADD68DDD854A47CCA131AF404FC24039','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2E158E3751FD43B7A09397DA5ED15629','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B7975D0A625A47E48525C4FDD510A88D','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AFC22D3EB01747F487D107C872642B80','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3DB753038E4241C1B4DD95698120A98A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7A67DE912B854844977A9C43935D2968','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5FA4BA0342F848818275F1301A973733','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4C77D9BF234245EC9BB3C6822A858A47','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A75E06760F2A4CAEABA6DFA3247E862A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'CFD05C1365CD4BCDA39B3D840A19688F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E061C56463B24073B4DAC97EA76AE16B','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '45354E8F8F46485C891526420D6C4A6D','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4B11C00765334C65A476993D0E7BCFF2','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B2B39234F10246D4AE08BF0005E86727','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '63BB6E1F63994C97B15246BDB5C3B877','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '562094F5C67F4FF0BBE5E2E9FD60B65C','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '017AC2843B544B4A92A9E59B27EFA747','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3233BD2EC8A843608BDA812887589D29','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1638191E29EE4DE9AC9B0826A122A1AC','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0E0C979CDEE04FC8B0901C1AA6F3EBED','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '08B5143BF85644129350B3728E835D34','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '662E02E1A53F407093E1F4BDB63DFE16','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8FDE5768D54D4464B79F57C60C9597D3','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '994FF3421C9548D6AC593DDD04E20E42','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6292548F1DA04406A77E6CD39FF8AE20','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '02D4AD90C1FB44AEB8CC749CAFFE75F1','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D9146764793E4FB2AF3FF1DE9257495A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F156BD71C7D34FFB879BA05E087DBD12','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '267F794055DE4FFE9B71FDC50E00CF28','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C1D67564A097441C89CEE5E23ECFAA05','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6BE6048F4DA449A49480EAE279B28E53','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5CDB4D8F54844DF39806A0E35C943458','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '829F74AA3C04411EB36D47EBD8691D8F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C7631A9BD7C54CAEB2606D50C79464A5','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '289FA28FB98449729261AD11C3859BE4','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7F2CAA696FEC430FA634C709E8F5DE1A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DC4F25C46AC84FAF9FF3EEB833D979BC','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '420FC89E018846C8B312CA0B71695DBF','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '938E4587DD73496BBD706359836ABACA','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FB94FBD86AC14E01A31DE1A3DDACFE58','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '682AAA2C069849C7B06B962D8B05D3D1','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '88CF6CB4AD2646F596F57106C1CBEEC1','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8BADC1BEFDF8481E9C4D9D59E418EE8E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7663F56CE2DA49C98950CEB091F73C0F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '98E07F092CFA4D039BD1A8D17DA88077','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F882E985327F49C9B78687F5A3E1324F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '68BE6145D613446BA3A6B21ACF5DAFE6','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3D053748EB884D73B104941FBD1CD806','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '88508835E27B422797B6BC21B101B4BA','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FAB9449ACE8046408D04F717494DE5AB','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B0542744B2A5479E9F0C62B67B76A376','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A3755777AD9145028622222B4F5D78E6','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C189D99BE5684600B5A58458D2B8489B','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '98796DC705E84D3F913E10A58CD2FD61','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '88A84E4835C64B23A7CC290217A86314','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9344AA8E0C644165B9C2D89EAC3932AF','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '248EF2AACD4D40C189957AD5F85FA2C0','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0BAFD3E3A4634E5793FDEBA44B6D49A0','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DBCF7B64840F48D6B3676F6A95646C04','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A396A187AA0A4B54B32DE03B7F18CA53','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0BA516A03EC045E7A159BF47FADEB2D0','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '46F791FB069C4032BDA0A5200A31EDE4','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9C427822EAE54243AA9989408318CF8E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5353B6F7755E4C5A9FDD23A87772EACE','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F0FF3C4EDC86445DAE15CB11FCC48734','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '77A88721C3D2496DB85B04B09A7B88DE','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '08750D42363F44D5BB2923DDB6F13A2E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6186AC33983347E5A0542E95AD8E8389','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2C6DFD1E35E94D0CB11799B0978B1408','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '282F9471C00D40EF9616DA763A5BAF78','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B80EB06FAC344F029FB9D03F5A55F6D1','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F7ABF383B0FF41868E3454A218A0006C','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C2D59914E2AE4DFFA0D1FB8C8E2DBB0E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'CCD7D0C8DAF04C1DB72AAD3D0225C081','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '648A5CC4407F4C3C9FE5FFA6C330204D','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7BB945A654934A0B9A06DC1BF4BF8DDE','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D253BC8D6AC941869A9426937AB591B8','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A138D3B593CD439795791D2B1CF03EF2','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '58699241654B4EBA80B5B41201774BDC','P3');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1DFDDDF5728149BA8E3B21C8398D7C57','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4E7F8571434E4477A58A347F34E173DD','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A50DA7BBAC3D4DD5AA35F59F7714F263','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6099425795BF4BE4A213AB4286045960','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BF874399771F43BFB2B46BC1C3DF3064','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BD81AA1D49C84134A021AEA6F4A53B7F','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0E58BFDDE95749ACB7AB44EC9F0BB06B','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C3BE1D052BD8413CA332404BC85DA5B3','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4727235F642248299A51C5F33C4DDF8F','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F27B2B1EB6BD486798DF627F9BAAD777','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '34CC7908B49E4EB0A329FB54CD77E472','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '68AA90AF30124BC3A55A6A7361DABE07','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5FDAC5E9EC2F45D781841ADA71EF3C0C','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '31466ED4B4C6482E8FF3185CB7BE6112','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '60D4B2DB0B9A43CCA9107826050F7FDF','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7350323589CD40A7B1C188684E677B5D','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EDF9DE5F745A4A6BADCFF632F6B3BB6B','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5321DE58F5934B1F9430D2B295AC74B7','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6061A3B1B83C48958185DD29DDEDC094','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8B10DE3AD40440258D48226B7272A2D8','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7CDCEDBC0C8E4A0BBD08871ED1243BED','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7D2B250B32964B65B96A0D537E13608E','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9EC7F5EA3A9346B5AEAEFF4FB7EA4A19','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E363F5CD7882435E884C4388A9501C44','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EC7C4B924A8846DDAEF0A42B69E65493','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6F7D24971ECC452B93423DB23904A672','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2357A39EB30243009F0F0CF0F59BFD34','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0119E854D981425096F3D6FC36A28264','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F7764F9FC04244B5927D3606CB9CF8AB','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0E8AE5020016486D91B342FA44DA3C95','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '000CCE7B524F44AB8BF5521CA16966D6','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D1EF1296EAF94C44B2A4A8FD86344076','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9193C7906B834A6EBEF307F917400F87','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3F54A259CC4E48A6B582DCF4F78D2C80','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '481115888F5D41B79B7C18717D3E6ECD','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5CEB71076F2B40BEA63ABB6599A117AC','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6D5C3C900FDA47F8875751A41B9772B8','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0E043D5241DD40D6BBC50E02C35204E5','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7A8EFE581FA44DAD90A59AE08913C6B9','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8E813AD6B32543DC9E903A313D0F39B9','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5486F66989454917A257E74C6E539444','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FB4A5738A14848B39AF151541C3363EF','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '881CEDD73ECD4E0C8331F4D17A385465','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '75C53846B9B0434287409F6753A57C70','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C61310777B21499D943F7B4DD617E136','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '45EEA4EFA4B043CDBDAE13E5C60025CF','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '929864CEC58E41D293030A6BE2B304CC','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5CBA37359A084968961049220E010D64','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B92716135447454AB3508840B081B484','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4CE5CD3B363442B2BAA438C8F0FC2EF4','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E5161B136D1F40B4A0F912833CBD1018','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A373B23808894EADB8D4C54F815AAF11','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E3717E041B814712808B0D150EDEA502','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '377488135FD943DD8BA100ECE88A7AE1','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '718F68CA652C42DB9C858D83605C5B2C','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F07044362A874777BEE4A1B3C8ED973A','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1813A31632314BB19B3A96B5D4446B59','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A2E1E23BD82E4B95B25EB8449DC9FBF1','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A559C19110184E759AA0189637FDB829','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AA552172E92B4D52AA79582DC1709CB7','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1AB450B63E4545A69E514BA52E7FD3A0','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '81BC2C20B4C445339F7B166789143DB0','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '32D685CBFBED4C1F9F930FAF023FF9DD','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2C996CA6C6E24E0397AE62B8201AAF2A','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B0FA1CA4323940688A82265BB71F5D58','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BB7BE34EF8F54CD89A66BBDEE7AC99E0','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BDC4D68117AD4B8DA481D9D296E01F34','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A55D17A6D0B94771BA4091229D36F34F','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6052F0F79CA849F3B7EC6CD1C733C3CC','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '83A6168E65B6479CB90A736510125649','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A02CCC98AD6647BABFF3516B827298E2','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D7D8DD0F125A4BE4B618A4E2086E6B5A','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FE306F6F10B548CB8BF2FD626BB1521C','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'CE0D6C3C62684C8BB8A5C3CFDF961860','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '48CC47364FC14F219D312DC8C6650388','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C268832EA650484C932A87BB6177A242','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8D5E5B88D27D49AE9B9BFAD05658E2EA','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AD95701A964146ACB4058F3970855019','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '631F4537E2034194805CA5FE3C03C653','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1855924CEDB34F9D973EA9EE26CE4084','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9D053201E6FB4D37BCEEA74706367788','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5C0A073F35CC4F95B0151478759C827E','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '51CCE99EF0D749408473BDBC5BDC33FC','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B32CF7810BCB4AD086313C393D401241','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6139D360EA224B158C48BD2C0BF5011E','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '653B90D859D249E5A3519456B5FFCB74','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '43EB56BA7A3C49CC88633CED98EAD689','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5D6D4AF3761640F0B05EB7B59D1F9E8B','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9CB5660536CB471CAB9C956A1CA74A26','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '40DAB21392354A9BABCA6B1206FD9805','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D0483B5BABAF4463BAD2391EE8EB7FAC','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DA07CFFFB250448FB100D54F7B1AEFE7','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '90747C50345E49AC87CD1913F6CAF365','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B71AC9FC81C64472BF6389895C0A5AD2','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0A9F5CD049D04743A750F2E0FF13EB48','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '40389AC511C440B4850C1B655313530C','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B13766DF5ADE442683F9382693751BA0','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5D7A6B0B00B649DD9C3EF48C497B5026','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6473B4263B844DADA4D095259A1D970B','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'CC31816073A3435F9B72AB2369CBD106','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8523235D370844458CAFDAEFCED89630','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C2ECAD67466340FDB948310660B6DD51','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D755114859D3471381125B80F9654C7A','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0EE1003805EF4C2C934C90FBFC71EB50','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F327AAE183324B39A4136DAAACF52F7B','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '84DE3600C0774BF4B87B004F54AC9BB4','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2976E9051AAE4269AB55AE4220BD7B1A','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AEF3FBE614024C35910CA2EA151440C4','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E953BAFE088C4B5E8DE1E9D54764B513','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EBAD8FDEA1404D489512E87F93173247','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9C86541CB00B4C89A80DC7B15828864F','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A9959EE004954826A054F95608F62DC6','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D2BED85A36024CF3BF434FFEB681EE24','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2AE72409EE184B289688057EC164A35D','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B9BFB97079554245B637AB2833F0479A','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BF05A16793A44F9C89F23976C83CEAF7','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D3CAC8F2EC6B45B4A7BC1D92C9D23E04','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E3CF437F5D584D60A3B5F0CB9E98D1FD','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7B1C19E312E0415595FAC8D8BBBE5BBE','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C9A59328A0CD42FABBEC8BCBB61172C6','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '72E0814C226D4A2B92A57B30D2A7C19B','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1CF9B2A12CCC4BDBB3317BC4B49BF8CD','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'ED8205B516114C53977E08A6ECC28050','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E4957453A3694F1F81ADC0BBBE900725','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '649AC2A342084446A175D4841E80563D','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '57E074D3BA4E42C58CD6582C54D6AA3A','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '00320813D4424FA4B313B1AFD0AB7EDB','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '211E6736218245BEBFC0CCB1D0743451','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9C18D510A54B4CEAAE66A3A6657B18BC','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F74F9452019F4A699E61397E6E05A606','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EAAC68221CF1493182CCF2D02F248622','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9ED55CDEFE5B4082910F21C6EC5B910F','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BCDA951893594588BB9A9E4AAACF8861','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6AD4C5B28DE24E5DA30EA5C458E07142','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '363AF36511EA47DF9CF232E147CBC57D','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0B0EED73769343598A071E8EA83D7701','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F5730D2C9F4C4570B38CDCB6FBE5CEFB','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A35B52B7FAB14BB393706D8FABEF62EC','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F3619D8CA8CC4C5392F68DC2D6813D04','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B37F05378060456D9FA1BD6C3F087FFD','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'CFA5BEF297E54D93ADA0D95C28705389','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3D1D01EDBB2C4A7F9238274FB6B8CFE2','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6E11ECA27A0949B8B79426ABE520E35D','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '87A506E7A01045C0A778F3C223D0D076','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '33EC889BC5ED47EC96E6E746368AC3E2','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B2B2EACE5BCD45A89A36C9C09940B53A','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F07716A9448B40FF9419CC37921067A4','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '38456A2F44A84A34AD9B7DB279570D13','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AF8807224B294F8982DCED2C29BE978D','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '897DAC8F1F5A42E4882E64F776E55B9A','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '534E8123630F4081B0882D7E544CF9DD','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '00E2BF0D75F249B4AA1E9A8E6D265ADE','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FED337F33FA24524B03F146D3837C658','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DECC00CDE3BE468AA0AAB31D81F71A17','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B5C18AA6D5EA46F2907635F5C2A6A1CF','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '97029453D31E4647964BAD29284BC6C7','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D4962C9F1E7B47059F3EF3F0C9F98740','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DE1ACA1EA80C4F1787C26A4AE12BF5C3','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2C91DABCFECE4526A671483A54C6ADC3','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '12F1DD4CD0D24DDB95383AA4B4112539','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'FC140A14246D47579DC5741B14F950C7','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '90CDFA7DB2B54EB5B96324F8E47604CF','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '519B2D1AD4194072AA790A9E23EDE058','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AFB98F06A9894EC698EE14905E80DA95','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DD17E55F9AFF430D9090127D5278DB71','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2DF2B4208EDA44A4A98BF64863A02B8A','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EC5DB6896E394E69A8C6F211C7E305C6','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6A6F375C6024424FA05ACB2CA18F3976','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A00BDE663FCC476C98D6982032652E4D','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '914631DACA9C41BB8198295E36304A1E','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3F7F77C46FCF4D96BBE2F35D5B2172A4','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '014E5C3FF7C1422B9EF8A4619C2AC9B6','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A9E315C08C5F40C5BC251AFD105AF422','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9A2B9B02012A4AC894D0222F0A71BB07','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B38D76A282FD45589BC4A96E8CDB73D4','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A42E3EBA1DEE471C9F0D38AC4271755A','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '293FFDFF30EC4B18B0822E0D70559E7B','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4EC7075027AE43658BB206195FF8C410','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AD49DBF270CF4817997EF87E2EA121BC','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8D8FF0381C8049C58B1058421426ABFB','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '62050CAAEFC444A1B04507B891B37CB9','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4D9B9840E0EB4047A286D3F41A185A21','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C20DAF3A590B42A8B4AA026536D5D29E','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '07938F945C7A4183BB74B6B6BA7E8ADA','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '250CD2EC0D7941FFB16A3FF8151D0D9C','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E582145A083E4E6E995F4879477EF490','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D01C1DD03E924A87B56294A1E1808A4F','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '54CA61A884C24E028B5A4B2660E1CC89','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B83597EC038C4E88821A224B91B06780','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F71AD1ABD1EF4E1092A5CB05478B8157','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AED37FDFD9FF455E99D09AB3CF8589E9','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '414C1819A8A9498CA866D25E36BD25C8','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6F469DAC349042FBAF9476345BC5C9D6','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'CDFBABF0BF4847299CF6A98BDA6EDEA0','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3863065EADC14985B2AF9AFDB12FFDCB','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E1D8B450C5734126A9B4F0E8A52EF89B','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '26EF8983A95641209B07FBB275A5A290','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '65BE3BE386764CE5B0A392210995CDB5','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D7B19416F0ED4C1E9D21D7585C3ADF88','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B61CAE0A1BD54ABB85EBD76EFFE32465','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B62FBDD1EF2848E99DC0F3D0F0B3875A','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AE328F29280B4BF2BCCE59BDE941F0D0','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D6BEDE491B06461C8267B7FD428BCF27','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '23F18F573AA9492B8BB2B820529ED37D','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F0DE352F6A634BFAB678B1C1EDD3EE97','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '417D2C842D2348E682D716ACE5C37375','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5A573B6D36A147DA9EFC46007611A93F','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '76AC051BCA69480AAA31234B107A9607','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A1DB2824AB874150B216C1192B0A5324','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8D3C69AB51E246B8B0185AC0D1DBB621','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E1D7523581C442BA9485BC07B24CC23B','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0A2A4E31875A4492AEFCB535B8615276','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5C5D71A2D8934EB981D062728DD452BB','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '478D6DF562B545E8894E5CC62D15FFA9','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E47ED1A5FC894C57880F56196774DCEF','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '99DB6C7B80D14D24B36DFAFFB0DC0A49','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E8ADC3686648452E8AB2F3934DCDE90C','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DAF3083B4E594BC08D3EC856F364A339','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C4191960F9DD4494B3317ADDDA7264AD','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8B3D18935A5C49A5A96E0D942D7B1E50','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9091D40A4F934ACCB036E3B58E72FD99','P4');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2BD47EE6CCB54A608D30F71DEFD081BE','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3101AB270A0D4940A25C2A4E2C00D6DF','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0EAF4A764AE14816AAF4C6F5B0FD037F','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '652E54793D2940E2A3FDBA6A2CD925B2','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BEDF2D1D49BD4C60A4BFF4ED844E26A9','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P4 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '94688F8A01D34006937B515B913215EE','P4');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BE9F8371884B46B294A30CAD6B139747','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E830F224A48B4D8A835924828D78B42E','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '28968E9424E44BA38081E728290B8BCD','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F05A634E980F44B9AB9979963A5514DC','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3B12D084D13743EDADF0B39A0C0CDAD2','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E10CD240AA47490EB47E71823F2DC600','NA');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4DE5E92E6A5F4983AD68B15225019822','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '96DE8A95C77D4CC290BE6E69A9837CC3','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B86CF1DFC6154B41A18B95CCD0241B9E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '28B19DA5961647D4AD6441EDB1A66F15','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '25C6B7B625894E179E448274D17CE84D','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7969F8428E404848804D7007ECDF6D69','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4D28F57E169346B58ED2899625B57443','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '13E41DB4381949678B7F87C2FE968474','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8570F26E939E4E9584E292BF4E8667EC','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D46B86C8F38642EDAE54AA0CF9B54F18','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3DECE623E59E40839D09E759831B0B48','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BFBF71775C3D4AD19A3CAEA0871CF1A4','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BD2C994BE6144B7E92D78E150FEF7D53','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'CC51B73A2BBE4FD68322FE06392ADF53','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '95AA1F395ABC4D45A4202CF7D1698A5E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '23E68AAF7AA34AA9BABD14ECE1AB06D4','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A9620DC7B0DF41DE8137EEE59EE73C67','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6A99E0EDA3F940C58B2ACCAA567C21FD','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '817A9BC6322D497C965D8A4688336046','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F48D7D1C21EF4A39B726010924E69165','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3A2420791E6F4128B3D851AF036F173A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D7BDCA7C09CB42FE8CA492523BC4897C','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3840ECEA60EB4347BED2A37558877B7B','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DBAB3B975B5543428DC7C39512A1602C','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EF684131E53F4F189E720A4E7E788F20','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '63467D3E1F90469D8C684A42209A50B8','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '570B69047A1B4C59842CF96F0BFDEE39','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1EA13D04E53541D4AD0D0BD160D209CD','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A3D78DFAD1C54418820621D2FB3DED34','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0621DBF9F83C4C27B7A4F3ADDDBAFEC0','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6EA469A89C8444899EACC5592EADD48A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '48771705539041C4AEFE927B7217B4E0','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B23278903F1B46E9B1D9371859D0443F','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2D21C73F408D4FAEB84BB67790839ED1','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8E020FDDB6534D66B38D4A477CD9FDEF','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A63BB3F57A9945ABB2404613DA3DFAE0','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8F8EF2A074BF46F696D39517736C2266','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A6732E225CBF4069B2D677B5C53BCB09','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5EBF3979492E4544B497C55BC0599C81','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '05AF950685B54AFBA3998E5411D93D19','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3AB285DA2B3D4BA1B1005DB81B2B144E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '19D6F0FD0F8E490CA2123DC6601A1348','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '850B95EC7D9B4CFA98D27F40D754F346','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A088E2819DE84DAB97F83A1FFB1D6742','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '58698A14F07A477F8A9256C7FA41A0A3','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8BE65EC1013446F28AA0B6FFC0C71F85','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AC2CA41582344B529979A6DFC2B3B253','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '66399AF3AEE64499A9E45960D1A06660','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6DC82077AB404632A589E7EA342EB5DE','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DA87B46E06ED4C05A71B7DFD07C27309','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '085CB617DF8541D2BCC342F8B9046434','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1FB6838FB4804C88A076BEAEC8BBCCCE','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4AD0495E6C25492AB9D9F29C0B564E7A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '23AE5C7ACF4A42B2B1783F0127F959B9','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5659250FE17848298381059D52239D2E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E4D59414C6B54531BEA33DCBBDCEA1ED','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BD3D320042BE46B3BD53F7CEB0458053','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4B792F33CED14EC9B563A6F314A4F56A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B1509CCD4CBF49D7A7B72A055CD4536D','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '02DB94496BB140B08B79205A2478A3FA','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B13470B0352542BB92DC7C737729F0CA','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D5B9474B2587408DB2DF74186648AD8E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B3A1F245858F44D29D9223269D53587A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7B43AAC2217648F4BC704FB8F5806694','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7F13BC02868D4BD28901E7F45521548B','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '18B7BDAAAF8349A1BEA4506E7789203B','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '92FC6E80FB5A4A89BF438C70C11C723D','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F16E8B6687D2499F921134BACDFCA35E','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7059CC368632445BA2154A60B0B633B3','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '973A6A281CA14F998995D3D5F23E365B','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C320B227E08C4F6DA6A5D40730C3863A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '98F9AB23AE86484DA99BCA9EEBB8C4AD','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8FAE8EEEC02646688B32F384CF286753','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BB59CAA9CD6B4329A22B03FFAD4D8D32','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1A5D79C1866B47A1ADCEA6DB426435A8','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C3042745D2AB4BA5BF52A2B0811A7A00','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F72E690CBA5C420B97123446B5BFB537','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A997D542BA4D4BDDA14FAC10B08F9A2B','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1B6F383F120E4D12A8934EB40DDB2493','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F976B5D2A8C94856916E8BEAEABFC99A','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1A0306927EA34E00A79FE8542FDCFFEF','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E1B7AD104F99477BB903A5B1A9672FA5','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2EBFFF93146046F2999047646102133D','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in recoverpoint device if possible, 2. Open a P3 Ticket to Infra team for verification and remediation');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0389AC40DAE847988A4A0CFE135196B8','P3');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5D75DEC8D3B044D9BC351DDBC8E48132','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2E5C48DE1F9341F687486B0BEE0A1717','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '70F99A2D6CAF475E87C8374B45612B12','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '97834DE4AFF74774B32179885D387A6C','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0E9D35C74BAD4B448E6CFEADD5CAC1E7','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C4527EA73F93456C96FB13814298BD83','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '340C85B6C79E48DE8C82CE5972A570B3','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AF674D23E35A4488AD576AB519C9A7BC','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A767F02BED1F4FC1A0400088581B5BAC','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E970B21E85C24299B4BBCAC094682541','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3491C4E2E5444B67BC4D684975394123','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5E1BA7D2A039497A8A87C83D576C4FA7','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'CF694FA14A744862BE1BBCFBB4A81234','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '52D4C38486A24DDAA270100306BE144C','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'D7744D4A06FB412FA3FC5A4D303E59B2','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '10E97E0983EA47088EB545D0B0C0A043','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9DEBAAD50555439397FCADE677B8577C','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F150ECCE0F8748DE9921DC4E6A15BB17','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2F901C869D6C48D5B9D4CE961D2BD6AA','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '72B1D62C282B4DEEBD037A85B0DCA479','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A7E5712A63F14FA798C65A0D10921183','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '057B3DD5FDF344E3A0217C6D951D25F4','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6B5A4EAED3F0433493616642CCE969BA','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3A3996E500A54FD1851078DB86F0C2EA','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '86BADAA3C3AE4837A54324F2DCE48236','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '125ED6ED9F654B7892B832C8E08D2EED','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BB6E0320579D473D846257184F84236F','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '6D2AB715EE9841258300DF73711594F9','NA');
insert into `procText` (procText) VALUES ( 'No Ticket required for this type of event');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1E54F1C821124358B6F2ADC284D83470','NA');

-- Quanta Servers 2017-Jul-13
insert into `procText` (procText) VALUES ( '1. Validate Alarm in VxRail Management to verify alert, 2. Open a P3 Incident with Infra for further valaidation and remedation.  Log any additonal VxRail Alerts that are present in Console');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '675581DA4FDE4C87B4449FED9302AF37','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in VxRail Management to verify alert, 2. Open a P2 Incident with Infra for further valaidation and remedation.  Log any additonal VxRail Alerts that are present in Console');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A4E301F5B5690BB020B26C9F577E3FE6','P2');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in VxRail Management to verify alert, 2. Open a P3 Incident with Infra for further valaidation and remedation.  Log any additonal VxRail Alerts that are present in Console');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C62C05A3A51B2BBE539AAA50EFB8EDF8','P3');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in VxRail Management to verify alert, 2. Open a P2 Incident with Infra for further valaidation and remedation.  Log any additonal VxRail Alerts that are present in Console');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C30BB8FF72E681124E99339504439795','P2');
insert into `procText` (procText) VALUES ( '1. Validate Alarm in VxRail Management to verify alert, 2. Open a P3 Incident with Infra for further valaidation and remedation.  Log any additonal VxRail Alerts that are present in Console');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5FD8DE61A9DACE832446C0219D8979C1','P3');

-- DPA Traps by Varbind  2017-Aug-09 
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4206D609894143DC85454D5C41281583', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AD5214B934924030902BFC79707C611D', 'P4');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AB056EE2AA2D4580B627B31EFC0356B3', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team  If found - Update existing ticket with info received.Notify Backup Admin Group immediately. Request regular updates from Backup Admin Group on ticket status.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F2EE7CA5B8394C08AA82D88C93B70B76', 'P3');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3CB15CF65D6D4FB18E18718F147922A8', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0412B7B688B84FB4806274DA03DE5C09', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BF879AF4BA5E466EA875A7EC2DA08360', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1B04FD638740493C95484CE327A70602', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5ACADCDFD00048708E1C2F3A7016BF6F', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7248444B783C428FB8AF9EBD2194F5AA', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team. If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '90958386E8A64021AEEF9C2D4B4EA94E', 'P4');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1802621BA9814E20823C651B61447CCD', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.   If found - Update existing ticket with info received. Notify Backup Admin Group');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '43F75CFCEF3F4A8E98F06775D16D35D1', 'P2');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2EE751575991404E889B96FFAC5AF677', 'P2');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group immediately.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '76EC0BF5B9EA4072BB38102083E643E0', 'P2');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1B8C5394F2714E1A869E7AF1BBBB6835', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket and ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group immediately. Request regular updates from Backup Admin Group on ticket status.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '69058F848178448D8BE6BB17DA9EF1FE', 'P2');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '277DC35433E44365884EBB9F2A08811E', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5AD2311D9B4D4118A560A25AB7691444', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '31ABBD902E894404830D6D55DED8B94F', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4CEA7CCC382449439CEC66F228534053', 'P1');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '13A701DB7B784D16A0426131BAC25157', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '430AD9ADC033444E983D076AD073F964', 'P4');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '33CD7CEF520344B48DF0F3B0901DDE44', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F9E0D3E6D1454A87B601F1F7FFA9D0C0', 'P2');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B428993201464234AD175B3AB06EC588', 'P2');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '209EA62044704C4BA0423831DCE0A75D', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0FB193F4702348749F74BCA6E1F53995', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0DE3EA7F8B7B4721845775974FC14A89', 'P2');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to RMS SAN team.  If found - Update existing ticket with info received.I');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '45BC073C8B7C42DBBF8FE1BAB46CEB5E', 'P2');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0C45FB6C6E8344169BDA6CC1BB02719A', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1C9D9D6BE89C4C7992F32909994CFF3B', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticke ASSIGN to BRS teamt.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C52832C2DD3D4F6190CD9A29A736BFCD', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '84F75BEF82F0434AAE782F9AEF8C8880', 'P4');
insert into `procText` (procText) VALUES ('Gather gc.log located in /usr/local/avamar/var/cron. Check for open SR.  If none found create SR attach gc.log file.   Check  for existing ticket. If none found - Create  ticket ESCALATE to RMS BRS team. If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5ADC2D9B00FF41C6985B749EF09B21B8', 'P3');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E81B404BD2704261B394DB8A5D2206F0', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket and ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EC240545FBB94777B509B0CB8575DEAC', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '79B1FA59BCE3453CA21F5C80EA0CB7A3', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '77C2E352D541467F999A63CFBF386428', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket and ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B64E826352824C07AE4D45CCAEF63682', 'P1');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8F4F0BC2D1154F298BBB1181B2D4F0C8', 'P3');
insert into `procText` (procText) VALUES ('Gather cp.log located in /usr/local/avamar/var/cron. Check for open SR.  If none found create SR attach cp.log file.   Check  for existing ticket. If none found - Create  ticket ESCALATE to RMS BRS team. If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F282C1E7A1A0427D9AC87675FFA41266', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '33783559250645C4973990D88162F7E1', 'P3');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A40FC27F5BF34A6DAFBC40FE05F17CC4', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F6371AE560B3467295ABA3C070BE3CCB', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '78899C1C0AF2441F9B02E57B2E4B02B2', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticke ASSIGN to BRS teamt.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9929AF856E25475686DC0349772DE5BE', 'P4');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3AE1039BD73E47D189B3356B5DF2F284', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F8ABA4F3B3234078A8FB9B4F257138EA', 'P3');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4291B8583DA4495CB6306962230E8885', 'NA');
insert into `procText` (procText) VALUES ('Gather replicate.log located in /usr/local/avamar/var/cron/replicate.log.  Check for open SR.  If none found create SR attach replicate.log file.   Check  for existing ticket. If none found - Create  ticket ESCALATE to RMS BRS  team. If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C263765B8B8C4B899F57C146CD4EC7D1', 'P2');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '64AC42C892BD41F3B2B47501603D7137', 'P2');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group immediately.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DE11178E3FA744E0AA6B5F812714E834', 'P2');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '10ED23038B8840B0908FC8A94D3757BE', 'P3');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '64655A107BD44967994B52137378C819', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1BD6F0FACF9D46FDABF1F41400C7E479', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '20C21C95DDBA42DDB81FC770484C9341', 'P4');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AA10A6144DDB4059A134C4C2968BC79F', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '70F657E4CAD14CFF8AC3C484FCFCE424', 'P1');
insert into `procText` (procText) VALUES ('Gather hfscheck.log located in /usr/local/avamar/var/cron. Check for open SR.  If none found create SR.   Document error received and attach hfscheck.log file. Check  for existing ticket. If none found - Create  ticket ESCALATE to RMS BRS team. If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0FB0EDD46B3D4748B34162DC46E8B3D2', 'P3');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '884F305D6A774D6CBD9C44F4BE9572D0', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '96730528F3E848F8816B528EAB551DA0', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '06B81C70AC524FD88A785B5B40A7346A', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B2BDCEC310524A0E8C0A76D16A5438CB', 'P2');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. Verify if:1 - Volumes available for write2 - Drives available for writeESCALATE to Backup Admin Group.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E87F43F8A8E140FBAEEC355AE2DE6E19', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1C65B5FA67FC4144867A07DFBB52A61F', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DAD08C1821074BFCAA0EBDD548972DEF', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C2F7A30E1520429491ED6A9DE7B2BD48', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket and ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'ECEC2AFE03BD4028A371BEC7C8DD154A', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '146199EC77AE4925928363D8F991E041', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E3088BD9927647CC8B55E05D4522C459', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C9A036216593412EA760FB142EC179ED', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5928F8EF65E14542863495D54BB40CE4', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0E1A1406829A43648DE352F9E50C121D', 'P4');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '30AD6DF9DD274887AD827569644C4CF6', 'NA');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket and ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '06FF6CFA0C5948E2B6978DABEBE39471', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '104F0EB361C7466B8CD5B99E4135C260', 'P4');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group immediately.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AAE631DDB32A44FE823716C1B77AC104', 'P1');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2C72AB42B865492EB03666A0A5682C05', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket and ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DCD8167920D54E81A3C28A1E31248A2E', 'P3');
insert into `procText` (procText) VALUES ('Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1F58C03F0A0B4D4D8A658786D500D16D', 'P4');
insert into `procText` (procText) VALUES ('Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3826D0F77547474E911A91B29865B282', 'NA');

-- DPA Traps by Varbind  2017-Aug-03 
/* insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C2F7A30E1520429491ED6A9DE7B2BD48','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4206D609894143DC85454D5C41281583','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket and ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group immediately. Request regular updates from Backup Admin Group on ticket status.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '69058F848178448D8BE6BB17DA9EF1FE','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0E1A1406829A43648DE352F9E50C121D','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5ACADCDFD00048708E1C2F3A7016BF6F','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1C65B5FA67FC4144867A07DFBB52A61F','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1BD6F0FACF9D46FDABF1F41400C7E479','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B2BDCEC310524A0E8C0A76D16A5438CB','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'A40FC27F5BF34A6DAFBC40FE05F17CC4','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '10ED23038B8840B0908FC8A94D3757BE','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C9A036216593412EA760FB142EC179ED','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F8ABA4F3B3234078A8FB9B4F257138EA','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2C72AB42B865492EB03666A0A5682C05','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '79B1FA59BCE3453CA21F5C80EA0CB7A3','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket and ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'ECEC2AFE03BD4028A371BEC7C8DD154A','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '96730528F3E848F8816B528EAB551DA0','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5928F8EF65E14542863495D54BB40CE4','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '33783559250645C4973990D88162F7E1','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0DE3EA7F8B7B4721845775974FC14A89','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '7248444B783C428FB8AF9EBD2194F5AA','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.   If found - Update existing ticket with info received. Notify Backup Admin Group');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '43F75CFCEF3F4A8E98F06775D16D35D1','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1B8C5394F2714E1A869E7AF1BBBB6835','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '33CD7CEF520344B48DF0F3B0901DDE44','');
insert into `procText` (procText) VALUES ( 'Gather cp.log located in /usr/local/avamar/var/cron. Check for open SR.  If none found create SR attach cp.log file.   Check  for existing ticket. If none found - Create  ticket ESCALATE to RMS BRS team. If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F282C1E7A1A0427D9AC87675FFA41266','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '2EE751575991404E889B96FFAC5AF677','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4291B8583DA4495CB6306962230E8885','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '8F4F0BC2D1154F298BBB1181B2D4F0C8','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '104F0EB361C7466B8CD5B99E4135C260','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0412B7B688B84FB4806274DA03DE5C09','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '70F657E4CAD14CFF8AC3C484FCFCE424','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group immediately.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AAE631DDB32A44FE823716C1B77AC104','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1F58C03F0A0B4D4D8A658786D500D16D','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team. If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '90958386E8A64021AEEF9C2D4B4EA94E','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '64655A107BD44967994B52137378C819','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '06B81C70AC524FD88A785B5B40A7346A','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3AE1039BD73E47D189B3356B5DF2F284','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0FB193F4702348749F74BCA6E1F53995','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '209EA62044704C4BA0423831DCE0A75D','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '30AD6DF9DD274887AD827569644C4CF6','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticke ASSIGN to BRS teamt.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '9929AF856E25475686DC0349772DE5BE','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AD5214B934924030902BFC79707C611D','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1B04FD638740493C95484CE327A70602','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F6371AE560B3467295ABA3C070BE3CCB','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AA10A6144DDB4059A134C4C2968BC79F','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket and ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DCD8167920D54E81A3C28A1E31248A2E','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket and ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '06FF6CFA0C5948E2B6978DABEBE39471','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DAD08C1821074BFCAA0EBDD548972DEF','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '64AC42C892BD41F3B2B47501603D7137','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3826D0F77547474E911A91B29865B282','');
insert into `procText` (procText) VALUES ( 'Gather gc.log located in /usr/local/avamar/var/cron. Check for open SR.  If none found create SR attach gc.log file.   Check  for existing ticket. If none found - Create  ticket ESCALATE to RMS BRS team. If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5ADC2D9B00FF41C6985B749EF09B21B8','');
insert into `procText` (procText) VALUES ( 'Gather hfscheck.log located in /usr/local/avamar/var/cron. Check for open SR.  If none found create SR.   Document error received and attach hfscheck.log file. Check  for existing ticket. If none found - Create  ticket ESCALATE to RMS BRS team. If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0FB0EDD46B3D4748B34162DC46E8B3D2','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '13A701DB7B784D16A0426131BAC25157','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '78899C1C0AF2441F9B02E57B2E4B02B2','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '4CEA7CCC382449439CEC66F228534053','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F9E0D3E6D1454A87B601F1F7FFA9D0C0','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket and ESCALATE to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B64E826352824C07AE4D45CCAEF63682','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticke ASSIGN to BRS teamt.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C52832C2DD3D4F6190CD9A29A736BFCD','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to RMS SAN team.  If found - Update existing ticket with info received.I');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '45BC073C8B7C42DBBF8FE1BAB46CEB5E','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team  If found - Update existing ticket with info received.Notify Backup Admin Group immediately. Request regular updates from Backup Admin Group on ticket status.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'F2EE7CA5B8394C08AA82D88C93B70B76','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'B428993201464234AD175B3AB06EC588','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket and ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'EC240545FBB94777B509B0CB8575DEAC','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '430AD9ADC033444E983D076AD073F964','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '20C21C95DDBA42DDB81FC770484C9341','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1802621BA9814E20823C651B61447CCD','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '31ABBD902E894404830D6D55DED8B94F','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '277DC35433E44365884EBB9F2A08811E','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '77C2E352D541467F999A63CFBF386428','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'AB056EE2AA2D4580B627B31EFC0356B3','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E81B404BD2704261B394DB8A5D2206F0','');
insert into `procText` (procText) VALUES ( 'Gather replicate.log located in /usr/local/avamar/var/cron/replicate.log.  Check for open SR.  If none found create SR attach replicate.log file.   Check  for existing ticket. If none found - Create  ticket ESCALATE to RMS BRS  team. If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'C263765B8B8C4B899F57C146CD4EC7D1','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '3CB15CF65D6D4FB18E18718F147922A8','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'BF879AF4BA5E466EA875A7EC2DA08360','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '1C9D9D6BE89C4C7992F32909994CFF3B','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group immediately.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '76EC0BF5B9EA4072BB38102083E643E0','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket.  If found - Update existing ticket with info received. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '5AD2311D9B4D4118A560A25AB7691444','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '0C45FB6C6E8344169BDA6CC1BB02719A','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ESCALATE to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group immediately.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'DE11178E3FA744E0AA6B5F812714E834','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '146199EC77AE4925928363D8F991E041','');
insert into `procText` (procText) VALUES ( 'Informational Only');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '884F305D6A774D6CBD9C44F4BE9572D0','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received.. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E3088BD9927647CC8B55E05D4522C459','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. Notify Backup Admin Group. ');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, '84F75BEF82F0434AAE782F9AEF8C8880','');
insert into `procText` (procText) VALUES ( 'Check  for existing ticket for alert generating device.  If none found - Create  ticket ASSIGN to BRS team.  If found - Update existing ticket with info received. Verify if:1 - Volumes available for write2 - Drives available for writeESCALATE to Backup Admin Group.');
SELECT max(procTextID) INTO @PROCTEXTID from procText;
insert into `eventProcMapping` (`procTextID`, `EventGUID`, `incidentPriority`) VALUES (@PROCTEXTID, 'E87F43F8A8E140FBAEEC355AE2DE6E19','');
 */